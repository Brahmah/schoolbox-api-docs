openapi: 3.0.2
info:
  version: 1.0.0
  title: Example.com
  termsOfService: 'https://example.com/terms/'
  contact:
    name: Example Contact
    email: contact@example.com
    url: 'http://example.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: '/logo.png'
  description: >
    This is an **example** API to demonstrate features of OpenAPI specification

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in 

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    It also demonstrates features of
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and 

    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond
    the standard OpenAPI syntax we use a few 

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: user
    x-displayName: Users
    description: |
      Create and manage users.

  - name: discussion
    x-displayName: Discussions
    description: |
      Create and manage discussion threads and comments.
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'
paths:

  /user:
    $ref: 'paths/user.yaml'

  /user/{id}:
    $ref: 'paths/user@{id}.yaml'

  /user/{id}/groupMembership:
    $ref: 'paths/user@{id}@groupMembership.yaml'

  /user/{id}/groupMembership/{groupId}:
    $ref: 'paths/user@{id}@groupMembership@{groupId}.yaml'

  /discussion/{contextType}/{contextId}/comments/{id}:
    $ref: 'paths/discussion@{contextType}@{contextId}@comments@{id}.yaml'

  /discussion/{contextType}/{contextId}/comments/{id}/comments:
    $ref: 'paths/discussion@{contextType}@{contextId}@comments@{id}@comments.yaml'

  /discussion/{contextType}/{contextId}/threads/{id}:
    $ref: 'paths/discussion@{contextType}@{contextId}@threads@{id}.yaml'

  /discussion/{contextType}/{contextId}/threads:
    $ref: 'paths/discussion@{contextType}@{contextId}@threads.yaml'

  /discussion/{contextType}/{contextId}/threads/{id}/comments:
    $ref: 'paths/discussion@{contextType}@{contextId}@threads@{id}@comments.yaml'

#  /discussion/{contextType}/{contextId}/threads/{id}/open:
#    $ref: 'paths/discussion@{contextType}@{contextId}@threads@{id}@open.yaml'
#
#  /discussion/{contextType}/{contextId}/threads/{id}/close:
#    $ref: 'paths/discussion@{contextType}@{contextId}@threads@{id}@close.yaml'

components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
