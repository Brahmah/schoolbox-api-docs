get:
  operationId: userSearch
  tags: [user]
  summary: Returns users which match a search term and set of filters.
  description: |
    `/api/user?search=rebecca&filter={"username":"rwhite","externalId":"501",
    "email":"user@example.com","role":{"name":"Senior Student", "id":4},
    "campus":{"name":"Secondary", "id":1},"year":{"name":"year 12", "id":13},
    "roleType":"student"}&cursor=0&limit=3`

  responses:
    '200':
      $ref: ../components/responses/user-list.yaml
    default:
      $ref: ../components/responses/problem.yaml
  parameters:
    - name: search
      in: query
      description: |
        will search `username`, `firstname`, `lastname` for non exact matches
      schema:
        type: string
      required: true
    - $ref: ../components/parameters/cursor.yaml
      default: 5
    - $ref: ../components/parameters/limit.yaml
    - name: filter
      in: query
      description: ''
      schema:
        type: object
        properties:
          externalId:
            type: string
            example: 501
          username:
            type: string
            example: jreed
          email:
            type: string
            example: jreed@schoolbox.com.au
          yearLevel:
            type: object
            properties:
              id:
                type: integer
                description: the db identifier of the Year Level
                example: 6
              name:
                type: integer
                description: the name of the Year Level. may not be unique
                example: Year 6
          role:
            type: object
            properties:
              id:
                type: integer
                description: the db identifier of the Role
                example: 1
              name:
                type: integer
                description: the name of the Role. may not be unique
                example: Staff
          roleType:
            type: string
            enum:
              - student
              - staff
              - parent
          campus:
            type: object
            properties:
              id:
                type: integer
                description: the db identifier of the Campus
                example: 6
              name:
                type: integer
                description: the name of the Campus. may not be unique
                example: Year 6

post:
  operationId: userPost
  tags: [user]
  summary: Creates a user
  description: |
    minimum fields required:
    ```
    "username": "rwhite",
    "role": {
      "id": 4
    },
    "campus": [
      {
        "id": 1
      }
    ],
    "firstName": "Rebecca"
    }
    ```
  responses:
    '201':
      $ref: ../components/responses/user-item.yaml
  requestBody:
    $ref: ../components/requestBodies/user-item.yaml
